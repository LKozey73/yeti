publishing with yeti
===

when rui released yaki, we ran a small experiment: he deployed a yaki installation, made a mercurial repo out of it and 4 people cloned it. then everyone made local changes, creating and modifying entries, and commited them upstream, where it was turned into a web site. this was mostly prompted by [a post pedro wrote][1]: long story short, wikis are mainly inefficient, glorified versioning systems with a web interface and sitting atop a database, and people keep re-writing them over and over again (i've been meaning to talk to you about this for a long time, [kake][2]). we can drop the versioning bit and do it properly with a real vcs, and we did just that using yaki and mercurial.

what i'm getting at is that there will be no user interface for publishing in yeti, at least from the start or written by me. what there will be is a library containing the basic publishing functions, which you'll be able to use in your web app or what have you. this library will provide the following:

* going over the data repo and (re-)generating webspace stuff
* checking for additions and/or changes
* sorting through the arrivals and *classifying* them (more on this later)

this leads to user authentication and authorization: ssh keys are pretty much painless, and something everyone uses every day. so, for each author, just stick an ssh key in the repo and that's that sorted out. from that moment on she can publish via scp or using any modern vcs. the latter gives me two things for free:

* an exact copy of the live website on any of my computers, where i can try things out, without having to deploy another install.
* offsite backups guaranteed to be in sync.

oh, did i mention a vcs? yes, i'll be able to roll back changes in a cinch.

[1]: http://www.simplicidade.org/notes/archives/2007/08/whats_wrong_wit.html "what's wrong with wikis"
[2]: http://nou.livejournal.com/ "kake writes the software that powers rgl"